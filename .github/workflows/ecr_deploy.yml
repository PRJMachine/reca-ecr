name: Zappa Docker Lambda Deploy # 워크플로의 이름을 정해줍니다
run-name: Deployment of ${{ github.repository }} through Zappa-Docker-Lambda # 워크플로의 상세 설명입니다
on: # 어떤 경우에 이 워크플로가 실행되는지 정해줍니다
  push: # 푸시하면 실행합니다
    branches: [ "main" ] # "main" 브랜치에 푸시하면 실행
#   pull_request: # 풀 리퀘스트가 생기면 실행합니다
#     branches: [ "main" ] # "main" 브랜치로 풀 리퀘스트가 생기면 실행
jobs: # 한 워크플로는 여러 병렬 실행 가능한 잡을 가질 수 있습니다
  deploy: # 잡 이름을 정해줍니다
    runs-on: ubuntu-latest # 깃허브 서버 내 가상환경의 최신 우분투 환경을 세팅해 진행
    env: # 환경변수를 정해줄 수 있습니다
      ECR_IMAGE_URI: ${{ secrets.ECR_IMAGE_URI }} # 저장소의 비밀 환경변수를 정해주었습니다
    steps: # 잡의 각 단계입니다
      - name: Checkout # 잡의 이름으로, 깃허브 서버로 이 저장소를 내려받습니다
        uses: actions/checkout@v3 # https://github.com/actions/checkout에서 액션을 공유받아 쓸 수 있습니다
      - name: Setup Python # 파이썬을 설치합니다
        uses: actions/setup-python@v4
        with: # 공유받은 액션을 위한 매개변수를 지정해야 합니다
          python-version: 3.8 # 액션에서 파이썬 3.8 버전을 사용하도록 합니다
      - name: Activate a virtual environment # 자파를 위한 가상환경 설치
        run: | # 커맨드라인 명령어를 사용할 수 있습니다
          python3 -m venv venv
          ./venv/bin/activate
          echo "VIRTUAL ENV:" $VIRTUAL_ENV
      - name: Install Python libraries with pip # pip로 파이썬 라이브러리 설치
        run: |
          pip3 install --upgrade pip
          pip3 install -r requirements.txt
      - name: Build Docker image # 도커 이미지 빌드
        run: docker build -t flask .
      - name: Tag Docker image # 도커 이미지를 ECR 경로로 태그
        run: docker tag flask $ECR_IMAGE_URI # 위에서 설정한 환경변수를 사용합니다
      - name: Configure AWS credentials # AWS 계정 로그인
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Transfers authority from AWS ECR to Docker # AWS 계정 정보를 도커로 전달
        run: >
          aws ecr get-login-password |
           docker login --username AWS --password-stdin $ECR_IMAGE_URI
      - name: Push Docker image to AWS ECR # 도커 이미지를 ECR에 업로드
        run: docker push $ECR_IMAGE_URI
      - name: Save python settings for production with Zappa # 자파에 필요한 파일 세팅
        run: zappa save-python-settings-file prod
      - name: Deploy application from AWS ECR to Lambda with Zappa # 자파로 람다에 배포 완료
        run: zappa update prod -d $ECR_IMAGE_URI